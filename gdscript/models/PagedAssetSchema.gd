extends Resource
class_name PagedAssetSchema

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# PagedAssetSchema Model


# Required: True
# isArray: true
@export var assets: Array:
	set(value):
		__assets__was__set = true
		assets = value
var __assets__was__set := false

# Required: True
# isArray: false
@export var totalSize: int:
	set(value):
		__totalSize__was__set = true
		totalSize = value
var __totalSize__was__set := false

# Required: False
# isArray: false
@export var nextPageToken: String:
	set(value):
		__nextPageToken__was__set = true
		nextPageToken = value
var __nextPageToken__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__assets__was__set:
		bzz_missing_properties.append("assets")
	if not self.__totalSize__was__set:
		bzz_missing_properties.append("totalSize")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__assets__was__set:
		bzz_dictionary["assets"] = self.assets
	if self.__totalSize__was__set:
		bzz_dictionary["totalSize"] = self.totalSize
	if self.__nextPageToken__was__set:
		bzz_dictionary["nextPageToken"] = self.nextPageToken
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("assets"):
		me.assets = AssetSchema.bzz_denormalize_multiple(from_dict["assets"])
	if from_dict.has("totalSize"):
		me.totalSize = from_dict["totalSize"]
	if from_dict.has("nextPageToken"):
		me.nextPageToken = from_dict["nextPageToken"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

