/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Category {
    #[serde(rename = "MISCELLANEOUS")]
    Miscellaneous,
    #[serde(rename = "ANIMALS")]
    Animals,
    #[serde(rename = "ARCHITECTURE")]
    Architecture,
    #[serde(rename = "ART")]
    Art,
    #[serde(rename = "CULTURE")]
    Culture,
    #[serde(rename = "EVENTS")]
    Events,
    #[serde(rename = "FOOD")]
    Food,
    #[serde(rename = "HISTORY")]
    History,
    #[serde(rename = "HOME")]
    Home,
    #[serde(rename = "NATURE")]
    Nature,
    #[serde(rename = "OBJECTS")]
    Objects,
    #[serde(rename = "PEOPLE")]
    People,
    #[serde(rename = "PLACES")]
    Places,
    #[serde(rename = "SCIENCE")]
    Science,
    #[serde(rename = "SPORTS")]
    Sports,
    #[serde(rename = "TECH")]
    Tech,
    #[serde(rename = "TRANSPORT")]
    Transport,
    #[serde(rename = "TRAVEL")]
    Travel,

}

impl std::fmt::Display for Category {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Miscellaneous => write!(f, "MISCELLANEOUS"),
            Self::Animals => write!(f, "ANIMALS"),
            Self::Architecture => write!(f, "ARCHITECTURE"),
            Self::Art => write!(f, "ART"),
            Self::Culture => write!(f, "CULTURE"),
            Self::Events => write!(f, "EVENTS"),
            Self::Food => write!(f, "FOOD"),
            Self::History => write!(f, "HISTORY"),
            Self::Home => write!(f, "HOME"),
            Self::Nature => write!(f, "NATURE"),
            Self::Objects => write!(f, "OBJECTS"),
            Self::People => write!(f, "PEOPLE"),
            Self::Places => write!(f, "PLACES"),
            Self::Science => write!(f, "SCIENCE"),
            Self::Sports => write!(f, "SPORTS"),
            Self::Tech => write!(f, "TECH"),
            Self::Transport => write!(f, "TRANSPORT"),
            Self::Travel => write!(f, "TRAVEL"),
        }
    }
}

impl Default for Category {
    fn default() -> Category {
        Self::Miscellaneous
    }
}

