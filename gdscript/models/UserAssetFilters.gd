extends Resource
class_name UserAssetFilters

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# UserAssetFilters Model


# Required: False
# isArray: false
@export var category: Category:
	set(value):
		__category__was__set = true
		category = value
var __category__was__set := false

# Required: False
# isArray: false
@export var curated: bool = false:
	set(value):
		__curated__was__set = true
		curated = value
var __curated__was__set := false

# Required: False
# isArray: true
@export var format: Array:
	set(value):
		__format__was__set = true
		format = value
var __format__was__set := false

# Required: False
# isArray: false
@export var keywords: String:
	set(value):
		__keywords__was__set = true
		keywords = value
var __keywords__was__set := false

# Required: False
# isArray: false
@export var name: String:
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Required: False
# isArray: false
@export var description: String:
	set(value):
		__description__was__set = true
		description = value
var __description__was__set := false

# Required: False
# isArray: true
@export var tag: Array:
	set(value):
		__tag__was__set = true
		tag = value
var __tag__was__set := false

# Required: False
# isArray: false
@export var orderBy: Order:
	set(value):
		__orderBy__was__set = true
		orderBy = value
var __orderBy__was__set := false

# Required: False
# isArray: false
@export var maxComplexity: Complexity:
	set(value):
		__maxComplexity__was__set = true
		maxComplexity = value
var __maxComplexity__was__set := false

# Required: False
# isArray: false
@export var triangleCountMin: int:
	set(value):
		__triangleCountMin__was__set = true
		triangleCountMin = value
var __triangleCountMin__was__set := false

# Required: False
# isArray: false
@export var triangleCountMax: int:
	set(value):
		__triangleCountMax__was__set = true
		triangleCountMax = value
var __triangleCountMax__was__set := false

# Required: False
# isArray: false
@export var zipArchiveUrl: String:
	set(value):
		__zipArchiveUrl__was__set = true
		zipArchiveUrl = value
var __zipArchiveUrl__was__set := false

# Required: False
# isArray: false
@export var visibility: String:
	set(value):
		__visibility__was__set = true
		visibility = value
var __visibility__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__category__was__set:
		bzz_dictionary["category"] = self.category
	if self.__curated__was__set:
		bzz_dictionary["curated"] = self.curated
	if self.__format__was__set:
		bzz_dictionary["format"] = self.format
	if self.__keywords__was__set:
		bzz_dictionary["keywords"] = self.keywords
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__description__was__set:
		bzz_dictionary["description"] = self.description
	if self.__tag__was__set:
		bzz_dictionary["tag"] = self.tag
	if self.__orderBy__was__set:
		bzz_dictionary["orderBy"] = self.orderBy
	if self.__maxComplexity__was__set:
		bzz_dictionary["maxComplexity"] = self.maxComplexity
	if self.__triangleCountMin__was__set:
		bzz_dictionary["triangleCountMin"] = self.triangleCountMin
	if self.__triangleCountMax__was__set:
		bzz_dictionary["triangleCountMax"] = self.triangleCountMax
	if self.__zipArchiveUrl__was__set:
		bzz_dictionary["zipArchiveUrl"] = self.zipArchiveUrl
	if self.__visibility__was__set:
		bzz_dictionary["visibility"] = self.visibility
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("category"):
		me.category = from_dict["category"]
	if from_dict.has("curated"):
		me.curated = from_dict["curated"]
	if from_dict.has("format"):
		me.format = from_dict["format"]
	if from_dict.has("keywords"):
		me.keywords = from_dict["keywords"]
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("description"):
		me.description = from_dict["description"]
	if from_dict.has("tag"):
		me.tag = from_dict["tag"]
	if from_dict.has("orderBy"):
		me.orderBy = from_dict["orderBy"]
	if from_dict.has("maxComplexity"):
		me.maxComplexity = from_dict["maxComplexity"]
	if from_dict.has("triangleCountMin"):
		me.triangleCountMin = from_dict["triangleCountMin"]
	if from_dict.has("triangleCountMax"):
		me.triangleCountMax = from_dict["triangleCountMax"]
	if from_dict.has("zipArchiveUrl"):
		me.zipArchiveUrl = from_dict["zipArchiveUrl"]
	if from_dict.has("visibility"):
		me.visibility = from_dict["visibility"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

