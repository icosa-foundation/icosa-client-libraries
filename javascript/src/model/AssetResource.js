/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetResource model module.
 * @module model/AssetResource
 * @version 1.0.0
 */
class AssetResource {
    /**
     * Constructs a new <code>AssetResource</code>.
     * @alias module:model/AssetResource
     * @param relativePath {String} 
     * @param contentType {String} 
     * @param url {String} 
     */
    constructor(relativePath, contentType, url) { 
        
        AssetResource.initialize(this, relativePath, contentType, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, relativePath, contentType, url) { 
        obj['relativePath'] = relativePath;
        obj['contentType'] = contentType;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>AssetResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetResource} obj Optional instance to populate.
     * @return {module:model/AssetResource} The populated <code>AssetResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetResource();

            if (data.hasOwnProperty('relativePath')) {
                obj['relativePath'] = ApiClient.convertToType(data['relativePath'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetResource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetResource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['relativePath'] && !(typeof data['relativePath'] === 'string' || data['relativePath'] instanceof String)) {
            throw new Error("Expected the field `relativePath` to be a primitive type in the JSON string but got " + data['relativePath']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

AssetResource.RequiredProperties = ["relativePath", "contentType", "url"];

/**
 * @member {String} relativePath
 */
AssetResource.prototype['relativePath'] = undefined;

/**
 * @member {String} contentType
 */
AssetResource.prototype['contentType'] = undefined;

/**
 * @member {String} url
 */
AssetResource.prototype['url'] = undefined;






export default AssetResource;

