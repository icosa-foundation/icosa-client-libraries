/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AssetFilters from './model/AssetFilters';
import AssetFormat from './model/AssetFormat';
import AssetResource from './model/AssetResource';
import AssetSchema from './model/AssetSchema';
import Category from './model/Category';
import Complexity from './model/Complexity';
import FormatComplexity from './model/FormatComplexity';
import FormatFilter from './model/FormatFilter';
import FullUserSchema from './model/FullUserSchema';
import Input from './model/Input';
import LicenseFilter from './model/LicenseFilter';
import LoginToken from './model/LoginToken';
import OembedOut from './model/OembedOut';
import Order from './model/Order';
import PagedAssetSchema from './model/PagedAssetSchema';
import PatchUserSchema from './model/PatchUserSchema';
import Thumbnail from './model/Thumbnail';
import UserAssetFilters from './model/UserAssetFilters';
import AssetsApi from './api/AssetsApi';
import LoginApi from './api/LoginApi';
import OembedApi from './api/OembedApi';
import UsersApi from './api/UsersApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var NinjaApi = require('index'); // See note below*.
* var xxxSvc = new NinjaApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new NinjaApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new NinjaApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new NinjaApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AssetFilters model constructor.
     * @property {module:model/AssetFilters}
     */
    AssetFilters,

    /**
     * The AssetFormat model constructor.
     * @property {module:model/AssetFormat}
     */
    AssetFormat,

    /**
     * The AssetResource model constructor.
     * @property {module:model/AssetResource}
     */
    AssetResource,

    /**
     * The AssetSchema model constructor.
     * @property {module:model/AssetSchema}
     */
    AssetSchema,

    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category,

    /**
     * The Complexity model constructor.
     * @property {module:model/Complexity}
     */
    Complexity,

    /**
     * The FormatComplexity model constructor.
     * @property {module:model/FormatComplexity}
     */
    FormatComplexity,

    /**
     * The FormatFilter model constructor.
     * @property {module:model/FormatFilter}
     */
    FormatFilter,

    /**
     * The FullUserSchema model constructor.
     * @property {module:model/FullUserSchema}
     */
    FullUserSchema,

    /**
     * The Input model constructor.
     * @property {module:model/Input}
     */
    Input,

    /**
     * The LicenseFilter model constructor.
     * @property {module:model/LicenseFilter}
     */
    LicenseFilter,

    /**
     * The LoginToken model constructor.
     * @property {module:model/LoginToken}
     */
    LoginToken,

    /**
     * The OembedOut model constructor.
     * @property {module:model/OembedOut}
     */
    OembedOut,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The PagedAssetSchema model constructor.
     * @property {module:model/PagedAssetSchema}
     */
    PagedAssetSchema,

    /**
     * The PatchUserSchema model constructor.
     * @property {module:model/PatchUserSchema}
     */
    PatchUserSchema,

    /**
     * The Thumbnail model constructor.
     * @property {module:model/Thumbnail}
     */
    Thumbnail,

    /**
     * The UserAssetFilters model constructor.
     * @property {module:model/UserAssetFilters}
     */
    UserAssetFilters,

    /**
    * The AssetsApi service constructor.
    * @property {module:api/AssetsApi}
    */
    AssetsApi,

    /**
    * The LoginApi service constructor.
    * @property {module:api/LoginApi}
    */
    LoginApi,

    /**
    * The OembedApi service constructor.
    * @property {module:api/OembedApi}
    */
    OembedApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
