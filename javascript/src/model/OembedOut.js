/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OembedOut model module.
 * @module model/OembedOut
 * @version 1.0.0
 */
class OembedOut {
    /**
     * Constructs a new <code>OembedOut</code>.
     * @alias module:model/OembedOut
     * @param type {module:model/OembedOut.TypeEnum} 
     * @param version {module:model/OembedOut.VersionEnum} 
     * @param html {String} 
     * @param width {Number} 
     * @param height {Number} 
     */
    constructor(type, version, html, width, height) { 
        
        OembedOut.initialize(this, type, version, html, width, height);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, version, html, width, height) { 
        obj['type'] = type;
        obj['version'] = version;
        obj['html'] = html;
        obj['width'] = width;
        obj['height'] = height;
    }

    /**
     * Constructs a <code>OembedOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OembedOut} obj Optional instance to populate.
     * @return {module:model/OembedOut} The populated <code>OembedOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OembedOut();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('author_name')) {
                obj['author_name'] = ApiClient.convertToType(data['author_name'], 'String');
            }
            if (data.hasOwnProperty('author_url')) {
                obj['author_url'] = ApiClient.convertToType(data['author_url'], 'String');
            }
            if (data.hasOwnProperty('provider_name')) {
                obj['provider_name'] = ApiClient.convertToType(data['provider_name'], 'String');
            }
            if (data.hasOwnProperty('provider_url')) {
                obj['provider_url'] = ApiClient.convertToType(data['provider_url'], 'String');
            }
            if (data.hasOwnProperty('cache_age')) {
                obj['cache_age'] = ApiClient.convertToType(data['cache_age'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_url')) {
                obj['thumbnail_url'] = ApiClient.convertToType(data['thumbnail_url'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_width')) {
                obj['thumbnail_width'] = ApiClient.convertToType(data['thumbnail_width'], 'String');
            }
            if (data.hasOwnProperty('thumbnail_height')) {
                obj['thumbnail_height'] = ApiClient.convertToType(data['thumbnail_height'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OembedOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OembedOut</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OembedOut.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['author_name'] && !(typeof data['author_name'] === 'string' || data['author_name'] instanceof String)) {
            throw new Error("Expected the field `author_name` to be a primitive type in the JSON string but got " + data['author_name']);
        }
        // ensure the json data is a string
        if (data['author_url'] && !(typeof data['author_url'] === 'string' || data['author_url'] instanceof String)) {
            throw new Error("Expected the field `author_url` to be a primitive type in the JSON string but got " + data['author_url']);
        }
        // ensure the json data is a string
        if (data['provider_name'] && !(typeof data['provider_name'] === 'string' || data['provider_name'] instanceof String)) {
            throw new Error("Expected the field `provider_name` to be a primitive type in the JSON string but got " + data['provider_name']);
        }
        // ensure the json data is a string
        if (data['provider_url'] && !(typeof data['provider_url'] === 'string' || data['provider_url'] instanceof String)) {
            throw new Error("Expected the field `provider_url` to be a primitive type in the JSON string but got " + data['provider_url']);
        }
        // ensure the json data is a string
        if (data['cache_age'] && !(typeof data['cache_age'] === 'string' || data['cache_age'] instanceof String)) {
            throw new Error("Expected the field `cache_age` to be a primitive type in the JSON string but got " + data['cache_age']);
        }
        // ensure the json data is a string
        if (data['thumbnail_url'] && !(typeof data['thumbnail_url'] === 'string' || data['thumbnail_url'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_url` to be a primitive type in the JSON string but got " + data['thumbnail_url']);
        }
        // ensure the json data is a string
        if (data['thumbnail_width'] && !(typeof data['thumbnail_width'] === 'string' || data['thumbnail_width'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_width` to be a primitive type in the JSON string but got " + data['thumbnail_width']);
        }
        // ensure the json data is a string
        if (data['thumbnail_height'] && !(typeof data['thumbnail_height'] === 'string' || data['thumbnail_height'] instanceof String)) {
            throw new Error("Expected the field `thumbnail_height` to be a primitive type in the JSON string but got " + data['thumbnail_height']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }

        return true;
    }


}

OembedOut.RequiredProperties = ["type", "version", "html", "width", "height"];

/**
 * @member {module:model/OembedOut.TypeEnum} type
 */
OembedOut.prototype['type'] = undefined;

/**
 * @member {module:model/OembedOut.VersionEnum} version
 */
OembedOut.prototype['version'] = undefined;

/**
 * @member {String} title
 */
OembedOut.prototype['title'] = undefined;

/**
 * @member {String} author_name
 */
OembedOut.prototype['author_name'] = undefined;

/**
 * @member {String} author_url
 */
OembedOut.prototype['author_url'] = undefined;

/**
 * @member {String} provider_name
 */
OembedOut.prototype['provider_name'] = undefined;

/**
 * @member {String} provider_url
 */
OembedOut.prototype['provider_url'] = undefined;

/**
 * @member {String} cache_age
 */
OembedOut.prototype['cache_age'] = undefined;

/**
 * @member {String} thumbnail_url
 */
OembedOut.prototype['thumbnail_url'] = undefined;

/**
 * @member {String} thumbnail_width
 */
OembedOut.prototype['thumbnail_width'] = undefined;

/**
 * @member {String} thumbnail_height
 */
OembedOut.prototype['thumbnail_height'] = undefined;

/**
 * @member {String} html
 */
OembedOut.prototype['html'] = undefined;

/**
 * @member {Number} width
 */
OembedOut.prototype['width'] = undefined;

/**
 * @member {Number} height
 */
OembedOut.prototype['height'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
OembedOut['TypeEnum'] = {

    /**
     * value: "rich"
     * @const
     */
    "rich": "rich"
};


/**
 * Allowed values for the <code>version</code> property.
 * @enum {String}
 * @readonly
 */
OembedOut['VersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "1.0": "1.0"
};



export default OembedOut;

