--[[
  NinjaAPI

  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

  The version of the OpenAPI document: 1.0.0
  
  Generated by: https://openapi-generator.tech
]]

--package openapiclient

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local openapiclient_asset_schema = require "openapiclient.model.asset_schema"
local openapiclient_category = require "openapiclient.model.category"
local openapiclient_complexity = require "openapiclient.model.complexity"
local openapiclient_format_filter = require "openapiclient.model.format_filter"
local openapiclient_license_filter = require "openapiclient.model.license_filter"
local openapiclient_order = require "openapiclient.model.order"
local openapiclient_paged_asset_schema = require "openapiclient.model.paged_asset_schema"

local assets_api = {}
local assets_api_mt = {
	__name = "assets_api";
	__index = assets_api;
}

local function new_assets_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "https://api.icosa.gallery";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, assets_api_mt)
end

function assets_api:icosa_api_assets_get_asset(asset)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/assets/%s",
			self.basePath, asset);
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")


	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_asset_schema.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

function assets_api:icosa_api_assets_get_assets(category, curated, format, keywords, name, description, tag, order_by, max_complexity, triangle_count_min, triangle_count_max, zip_archive_url, author_name, license, page_token, page_size)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/v1/assets?category=%s&curated=%s&format=%s&keywords=%s&name=%s&description=%s&tag=%s&orderBy=%s&maxComplexity=%s&triangleCountMin=%s&triangleCountMax=%s&zipArchiveUrl=%s&authorName=%s&license=%s&pageToken=%s&pageSize=%s",
			self.basePath, http_util.encodeURIComponent(category), http_util.encodeURIComponent(curated), http_util.encodeURIComponent(format), http_util.encodeURIComponent(keywords), http_util.encodeURIComponent(name), http_util.encodeURIComponent(description), http_util.encodeURIComponent(tag), http_util.encodeURIComponent(order_by), http_util.encodeURIComponent(max_complexity), http_util.encodeURIComponent(triangle_count_min), http_util.encodeURIComponent(triangle_count_max), http_util.encodeURIComponent(zip_archive_url), http_util.encodeURIComponent(author_name), http_util.encodeURIComponent(license), http_util.encodeURIComponent(page_token), http_util.encodeURIComponent(page_size));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")


	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_paged_asset_schema.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_assets_api;
}
