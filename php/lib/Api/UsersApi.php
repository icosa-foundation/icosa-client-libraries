<?php
/**
 * UsersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'icosaApiUsersDeleteAsset' => [
            'application/json',
        ],
        'icosaApiUsersGetMeAsset' => [
            'application/json',
        ],
        'icosaApiUsersGetMeAssets' => [
            'application/json',
        ],
        'icosaApiUsersGetMeLikedassets' => [
            'application/json',
        ],
        'icosaApiUsersGetUsersMe' => [
            'application/json',
        ],
        'icosaApiUsersUpdateUser' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation icosaApiUsersDeleteAsset
     *
     * Delete Asset
     *
     * @param  string $asset asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersDeleteAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function icosaApiUsersDeleteAsset($asset, string $contentType = self::contentTypes['icosaApiUsersDeleteAsset'][0])
    {
        list($response) = $this->icosaApiUsersDeleteAssetWithHttpInfo($asset, $contentType);
        return $response;
    }

    /**
     * Operation icosaApiUsersDeleteAssetWithHttpInfo
     *
     * Delete Asset
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersDeleteAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function icosaApiUsersDeleteAssetWithHttpInfo($asset, string $contentType = self::contentTypes['icosaApiUsersDeleteAsset'][0])
    {
        $request = $this->icosaApiUsersDeleteAssetRequest($asset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation icosaApiUsersDeleteAssetAsync
     *
     * Delete Asset
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersDeleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersDeleteAssetAsync($asset, string $contentType = self::contentTypes['icosaApiUsersDeleteAsset'][0])
    {
        return $this->icosaApiUsersDeleteAssetAsyncWithHttpInfo($asset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation icosaApiUsersDeleteAssetAsyncWithHttpInfo
     *
     * Delete Asset
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersDeleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersDeleteAssetAsyncWithHttpInfo($asset, string $contentType = self::contentTypes['icosaApiUsersDeleteAsset'][0])
    {
        $returnType = 'int';
        $request = $this->icosaApiUsersDeleteAssetRequest($asset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'icosaApiUsersDeleteAsset'
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersDeleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function icosaApiUsersDeleteAssetRequest($asset, string $contentType = self::contentTypes['icosaApiUsersDeleteAsset'][0])
    {

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling icosaApiUsersDeleteAsset'
            );
        }


        $resourcePath = '/v1/users/me/assets/{asset}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($asset !== null) {
            $resourcePath = str_replace(
                '{' . 'asset' . '}',
                ObjectSerializer::toPathValue($asset),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation icosaApiUsersGetMeAsset
     *
     * Get Me Asset
     *
     * @param  string $asset asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetSchema
     */
    public function icosaApiUsersGetMeAsset($asset, string $contentType = self::contentTypes['icosaApiUsersGetMeAsset'][0])
    {
        list($response) = $this->icosaApiUsersGetMeAssetWithHttpInfo($asset, $contentType);
        return $response;
    }

    /**
     * Operation icosaApiUsersGetMeAssetWithHttpInfo
     *
     * Get Me Asset
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function icosaApiUsersGetMeAssetWithHttpInfo($asset, string $contentType = self::contentTypes['icosaApiUsersGetMeAsset'][0])
    {
        $request = $this->icosaApiUsersGetMeAssetRequest($asset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AssetSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation icosaApiUsersGetMeAssetAsync
     *
     * Get Me Asset
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetMeAssetAsync($asset, string $contentType = self::contentTypes['icosaApiUsersGetMeAsset'][0])
    {
        return $this->icosaApiUsersGetMeAssetAsyncWithHttpInfo($asset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation icosaApiUsersGetMeAssetAsyncWithHttpInfo
     *
     * Get Me Asset
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetMeAssetAsyncWithHttpInfo($asset, string $contentType = self::contentTypes['icosaApiUsersGetMeAsset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetSchema';
        $request = $this->icosaApiUsersGetMeAssetRequest($asset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'icosaApiUsersGetMeAsset'
     *
     * @param  string $asset (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function icosaApiUsersGetMeAssetRequest($asset, string $contentType = self::contentTypes['icosaApiUsersGetMeAsset'][0])
    {

        // verify the required parameter 'asset' is set
        if ($asset === null || (is_array($asset) && count($asset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset when calling icosaApiUsersGetMeAsset'
            );
        }


        $resourcePath = '/v1/users/me/assets/{asset}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($asset !== null) {
            $resourcePath = str_replace(
                '{' . 'asset' . '}',
                ObjectSerializer::toPathValue($asset),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation icosaApiUsersGetMeAssets
     *
     * Get Me Assets
     *
     * @param  \OpenAPI\Client\Model\Category $category category (optional)
     * @param  bool $curated curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords keywords (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string[] $tag tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity max_complexity (optional)
     * @param  int $triangle_count_min triangle_count_min (optional)
     * @param  int $triangle_count_max triangle_count_max (optional)
     * @param  string $zip_archive_url zip_archive_url (optional)
     * @param  string $visibility visibility (optional)
     * @param  string $page_token page_token (optional)
     * @param  string $page_size page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAssets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PagedAssetSchema
     */
    public function icosaApiUsersGetMeAssets($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $visibility = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeAssets'][0])
    {
        list($response) = $this->icosaApiUsersGetMeAssetsWithHttpInfo($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $visibility, $page_token, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation icosaApiUsersGetMeAssetsWithHttpInfo
     *
     * Get Me Assets
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $visibility (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAssets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PagedAssetSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function icosaApiUsersGetMeAssetsWithHttpInfo($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $visibility = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeAssets'][0])
    {
        $request = $this->icosaApiUsersGetMeAssetsRequest($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $visibility, $page_token, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PagedAssetSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PagedAssetSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PagedAssetSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PagedAssetSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PagedAssetSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation icosaApiUsersGetMeAssetsAsync
     *
     * Get Me Assets
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $visibility (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetMeAssetsAsync($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $visibility = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeAssets'][0])
    {
        return $this->icosaApiUsersGetMeAssetsAsyncWithHttpInfo($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $visibility, $page_token, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation icosaApiUsersGetMeAssetsAsyncWithHttpInfo
     *
     * Get Me Assets
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $visibility (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetMeAssetsAsyncWithHttpInfo($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $visibility = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeAssets'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PagedAssetSchema';
        $request = $this->icosaApiUsersGetMeAssetsRequest($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $visibility, $page_token, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'icosaApiUsersGetMeAssets'
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $visibility (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function icosaApiUsersGetMeAssetsRequest($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $visibility = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeAssets'][0])
    {

















        $resourcePath = '/v1/users/me/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category,
            'category', // param base name
            'Category', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $curated,
            'curated', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords,
            'keywords', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'Order', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_complexity,
            'maxComplexity', // param base name
            'Complexity', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $triangle_count_min,
            'triangleCountMin', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $triangle_count_max,
            'triangleCountMax', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip_archive_url,
            'zipArchiveUrl', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $visibility,
            'visibility', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'pageToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation icosaApiUsersGetMeLikedassets
     *
     * Get Me Likedassets
     *
     * @param  \OpenAPI\Client\Model\Category $category category (optional)
     * @param  bool $curated curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords keywords (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string[] $tag tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity max_complexity (optional)
     * @param  int $triangle_count_min triangle_count_min (optional)
     * @param  int $triangle_count_max triangle_count_max (optional)
     * @param  string $zip_archive_url zip_archive_url (optional)
     * @param  string $author_name author_name (optional)
     * @param  \OpenAPI\Client\Model\LicenseFilter $license license (optional)
     * @param  string $page_token page_token (optional)
     * @param  string $page_size page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeLikedassets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PagedAssetSchema
     */
    public function icosaApiUsersGetMeLikedassets($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $author_name = null, $license = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeLikedassets'][0])
    {
        list($response) = $this->icosaApiUsersGetMeLikedassetsWithHttpInfo($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $author_name, $license, $page_token, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation icosaApiUsersGetMeLikedassetsWithHttpInfo
     *
     * Get Me Likedassets
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $author_name (optional)
     * @param  \OpenAPI\Client\Model\LicenseFilter $license (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeLikedassets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PagedAssetSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function icosaApiUsersGetMeLikedassetsWithHttpInfo($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $author_name = null, $license = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeLikedassets'][0])
    {
        $request = $this->icosaApiUsersGetMeLikedassetsRequest($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $author_name, $license, $page_token, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PagedAssetSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PagedAssetSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PagedAssetSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PagedAssetSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PagedAssetSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation icosaApiUsersGetMeLikedassetsAsync
     *
     * Get Me Likedassets
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $author_name (optional)
     * @param  \OpenAPI\Client\Model\LicenseFilter $license (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeLikedassets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetMeLikedassetsAsync($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $author_name = null, $license = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeLikedassets'][0])
    {
        return $this->icosaApiUsersGetMeLikedassetsAsyncWithHttpInfo($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $author_name, $license, $page_token, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation icosaApiUsersGetMeLikedassetsAsyncWithHttpInfo
     *
     * Get Me Likedassets
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $author_name (optional)
     * @param  \OpenAPI\Client\Model\LicenseFilter $license (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeLikedassets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetMeLikedassetsAsyncWithHttpInfo($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $author_name = null, $license = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeLikedassets'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PagedAssetSchema';
        $request = $this->icosaApiUsersGetMeLikedassetsRequest($category, $curated, $format, $keywords, $name, $description, $tag, $order_by, $max_complexity, $triangle_count_min, $triangle_count_max, $zip_archive_url, $author_name, $license, $page_token, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'icosaApiUsersGetMeLikedassets'
     *
     * @param  \OpenAPI\Client\Model\Category $category (optional)
     * @param  bool $curated (optional, default to false)
     * @param  \OpenAPI\Client\Model\FormatFilter[] $format Filter by format (optional)
     * @param  string $keywords (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string[] $tag (optional)
     * @param  \OpenAPI\Client\Model\Order $order_by (optional)
     * @param  \OpenAPI\Client\Model\Complexity $max_complexity (optional)
     * @param  int $triangle_count_min (optional)
     * @param  int $triangle_count_max (optional)
     * @param  string $zip_archive_url (optional)
     * @param  string $author_name (optional)
     * @param  \OpenAPI\Client\Model\LicenseFilter $license (optional)
     * @param  string $page_token (optional)
     * @param  string $page_size (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetMeLikedassets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function icosaApiUsersGetMeLikedassetsRequest($category = null, $curated = false, $format = null, $keywords = null, $name = null, $description = null, $tag = null, $order_by = null, $max_complexity = null, $triangle_count_min = null, $triangle_count_max = null, $zip_archive_url = null, $author_name = null, $license = null, $page_token = null, $page_size = null, string $contentType = self::contentTypes['icosaApiUsersGetMeLikedassets'][0])
    {


















        $resourcePath = '/v1/users/me/likedassets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category,
            'category', // param base name
            'Category', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $curated,
            'curated', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords,
            'keywords', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'Order', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_complexity,
            'maxComplexity', // param base name
            'Complexity', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $triangle_count_min,
            'triangleCountMin', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $triangle_count_max,
            'triangleCountMax', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip_archive_url,
            'zipArchiveUrl', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $author_name,
            'authorName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $license,
            'license', // param base name
            'LicenseFilter', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'pageToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation icosaApiUsersGetUsersMe
     *
     * Get Users Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetUsersMe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FullUserSchema
     */
    public function icosaApiUsersGetUsersMe(string $contentType = self::contentTypes['icosaApiUsersGetUsersMe'][0])
    {
        list($response) = $this->icosaApiUsersGetUsersMeWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation icosaApiUsersGetUsersMeWithHttpInfo
     *
     * Get Users Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetUsersMe'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FullUserSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function icosaApiUsersGetUsersMeWithHttpInfo(string $contentType = self::contentTypes['icosaApiUsersGetUsersMe'][0])
    {
        $request = $this->icosaApiUsersGetUsersMeRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FullUserSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FullUserSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FullUserSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\FullUserSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FullUserSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation icosaApiUsersGetUsersMeAsync
     *
     * Get Users Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetUsersMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetUsersMeAsync(string $contentType = self::contentTypes['icosaApiUsersGetUsersMe'][0])
    {
        return $this->icosaApiUsersGetUsersMeAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation icosaApiUsersGetUsersMeAsyncWithHttpInfo
     *
     * Get Users Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetUsersMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersGetUsersMeAsyncWithHttpInfo(string $contentType = self::contentTypes['icosaApiUsersGetUsersMe'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FullUserSchema';
        $request = $this->icosaApiUsersGetUsersMeRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'icosaApiUsersGetUsersMe'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersGetUsersMe'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function icosaApiUsersGetUsersMeRequest(string $contentType = self::contentTypes['icosaApiUsersGetUsersMe'][0])
    {


        $resourcePath = '/v1/users/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation icosaApiUsersUpdateUser
     *
     * Update User
     *
     * @param  \OpenAPI\Client\Model\PatchUserSchema $patch_user_schema patch_user_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersUpdateUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FullUserSchema
     */
    public function icosaApiUsersUpdateUser($patch_user_schema, string $contentType = self::contentTypes['icosaApiUsersUpdateUser'][0])
    {
        list($response) = $this->icosaApiUsersUpdateUserWithHttpInfo($patch_user_schema, $contentType);
        return $response;
    }

    /**
     * Operation icosaApiUsersUpdateUserWithHttpInfo
     *
     * Update User
     *
     * @param  \OpenAPI\Client\Model\PatchUserSchema $patch_user_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersUpdateUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FullUserSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function icosaApiUsersUpdateUserWithHttpInfo($patch_user_schema, string $contentType = self::contentTypes['icosaApiUsersUpdateUser'][0])
    {
        $request = $this->icosaApiUsersUpdateUserRequest($patch_user_schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FullUserSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FullUserSchema' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FullUserSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\FullUserSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FullUserSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation icosaApiUsersUpdateUserAsync
     *
     * Update User
     *
     * @param  \OpenAPI\Client\Model\PatchUserSchema $patch_user_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersUpdateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersUpdateUserAsync($patch_user_schema, string $contentType = self::contentTypes['icosaApiUsersUpdateUser'][0])
    {
        return $this->icosaApiUsersUpdateUserAsyncWithHttpInfo($patch_user_schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation icosaApiUsersUpdateUserAsyncWithHttpInfo
     *
     * Update User
     *
     * @param  \OpenAPI\Client\Model\PatchUserSchema $patch_user_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersUpdateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function icosaApiUsersUpdateUserAsyncWithHttpInfo($patch_user_schema, string $contentType = self::contentTypes['icosaApiUsersUpdateUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FullUserSchema';
        $request = $this->icosaApiUsersUpdateUserRequest($patch_user_schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'icosaApiUsersUpdateUser'
     *
     * @param  \OpenAPI\Client\Model\PatchUserSchema $patch_user_schema (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['icosaApiUsersUpdateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function icosaApiUsersUpdateUserRequest($patch_user_schema, string $contentType = self::contentTypes['icosaApiUsersUpdateUser'][0])
    {

        // verify the required parameter 'patch_user_schema' is set
        if ($patch_user_schema === null || (is_array($patch_user_schema) && count($patch_user_schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_user_schema when calling icosaApiUsersUpdateUser'
            );
        }


        $resourcePath = '/v1/users/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_user_schema)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_user_schema));
            } else {
                $httpBody = $patch_user_schema;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
