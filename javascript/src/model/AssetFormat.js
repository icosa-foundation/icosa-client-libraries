/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetResource from './AssetResource';
import FormatComplexity from './FormatComplexity';

/**
 * The AssetFormat model module.
 * @module model/AssetFormat
 * @version 1.0.0
 */
class AssetFormat {
    /**
     * Constructs a new <code>AssetFormat</code>.
     * @alias module:model/AssetFormat
     * @param formatComplexity {module:model/FormatComplexity} 
     */
    constructor(formatComplexity) { 
        
        AssetFormat.initialize(this, formatComplexity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, formatComplexity) { 
        obj['formatComplexity'] = formatComplexity;
    }

    /**
     * Constructs a <code>AssetFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetFormat} obj Optional instance to populate.
     * @return {module:model/AssetFormat} The populated <code>AssetFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetFormat();

            if (data.hasOwnProperty('root')) {
                obj['root'] = AssetResource.constructFromObject(data['root']);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [AssetResource]);
            }
            if (data.hasOwnProperty('formatComplexity')) {
                obj['formatComplexity'] = FormatComplexity.constructFromObject(data['formatComplexity']);
            }
            if (data.hasOwnProperty('formatType')) {
                obj['formatType'] = ApiClient.convertToType(data['formatType'], 'String');
            }
            if (data.hasOwnProperty('zip_archive_url')) {
                obj['zip_archive_url'] = ApiClient.convertToType(data['zip_archive_url'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetFormat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetFormat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `root`
        if (data['root']) { // data not null
          AssetResource.validateJSON(data['root']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                AssetResource.validateJSON(item);
            };
        }
        // validate the optional field `formatComplexity`
        if (data['formatComplexity']) { // data not null
          FormatComplexity.validateJSON(data['formatComplexity']);
        }
        // ensure the json data is a string
        if (data['formatType'] && !(typeof data['formatType'] === 'string' || data['formatType'] instanceof String)) {
            throw new Error("Expected the field `formatType` to be a primitive type in the JSON string but got " + data['formatType']);
        }
        // ensure the json data is a string
        if (data['zip_archive_url'] && !(typeof data['zip_archive_url'] === 'string' || data['zip_archive_url'] instanceof String)) {
            throw new Error("Expected the field `zip_archive_url` to be a primitive type in the JSON string but got " + data['zip_archive_url']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

AssetFormat.RequiredProperties = ["formatComplexity"];

/**
 * @member {module:model/AssetResource} root
 */
AssetFormat.prototype['root'] = undefined;

/**
 * @member {Array.<module:model/AssetResource>} resources
 */
AssetFormat.prototype['resources'] = undefined;

/**
 * @member {module:model/FormatComplexity} formatComplexity
 */
AssetFormat.prototype['formatComplexity'] = undefined;

/**
 * @member {String} formatType
 */
AssetFormat.prototype['formatType'] = undefined;

/**
 * @member {String} zip_archive_url
 */
AssetFormat.prototype['zip_archive_url'] = undefined;

/**
 * @member {String} role
 */
AssetFormat.prototype['role'] = undefined;






export default AssetFormat;

