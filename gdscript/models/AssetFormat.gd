extends Resource
class_name AssetFormat

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# AssetFormat Model


# Required: False
# isArray: false
@export var root: AssetResource:
	set(value):
		__root__was__set = true
		root = value
var __root__was__set := false

# Required: False
# isArray: true
@export var resources: Array:
	set(value):
		__resources__was__set = true
		resources = value
var __resources__was__set := false

# Required: True
# isArray: false
@export var formatComplexity: FormatComplexity:
	set(value):
		__formatComplexity__was__set = true
		formatComplexity = value
var __formatComplexity__was__set := false

# Required: False
# isArray: false
@export var formatType: String:
	set(value):
		__formatType__was__set = true
		formatType = value
var __formatType__was__set := false

# Required: False
# isArray: false
@export var zipUnderscorearchiveUnderscoreurl: String:
	set(value):
		__zipUnderscorearchiveUnderscoreurl__was__set = true
		zipUnderscorearchiveUnderscoreurl = value
var __zipUnderscorearchiveUnderscoreurl__was__set := false

# Required: False
# isArray: false
@export var role: String:
	set(value):
		__role__was__set = true
		role = value
var __role__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__formatComplexity__was__set:
		bzz_missing_properties.append("formatComplexity")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__root__was__set:
		bzz_dictionary["root"] = self.root
	if self.__resources__was__set:
		bzz_dictionary["resources"] = self.resources
	if self.__formatComplexity__was__set:
		bzz_dictionary["formatComplexity"] = self.formatComplexity
	if self.__formatType__was__set:
		bzz_dictionary["formatType"] = self.formatType
	if self.__zipUnderscorearchiveUnderscoreurl__was__set:
		bzz_dictionary["zipUnderscorearchiveUnderscoreurl"] = self.zipUnderscorearchiveUnderscoreurl
	if self.__role__was__set:
		bzz_dictionary["role"] = self.role
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("root"):
		me.root = AssetResource.bzz_denormalize_single(from_dict["root"])
	if from_dict.has("resources"):
		me.resources = AssetResource.bzz_denormalize_multiple(from_dict["resources"])
	if from_dict.has("formatComplexity"):
		me.formatComplexity = FormatComplexity.bzz_denormalize_single(from_dict["formatComplexity"])
	if from_dict.has("formatType"):
		me.formatType = from_dict["formatType"]
	if from_dict.has("zipUnderscorearchiveUnderscoreurl"):
		me.zipUnderscorearchiveUnderscoreurl = from_dict["zipUnderscorearchiveUnderscoreurl"]
	if from_dict.has("role"):
		me.role = from_dict["role"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

