/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssetSchema from '../model/AssetSchema';
import Category from '../model/Category';
import Complexity from '../model/Complexity';
import FormatFilter from '../model/FormatFilter';
import FullUserSchema from '../model/FullUserSchema';
import LicenseFilter from '../model/LicenseFilter';
import Order from '../model/Order';
import PagedAssetSchema from '../model/PagedAssetSchema';
import PatchUserSchema from '../model/PatchUserSchema';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the icosaApiUsersDeleteAsset operation.
     * @callback module:api/UsersApi~icosaApiUsersDeleteAssetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Asset
     * @param {String} asset 
     * @param {module:api/UsersApi~icosaApiUsersDeleteAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    icosaApiUsersDeleteAsset(asset, callback) {
      let postBody = null;
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling icosaApiUsersDeleteAsset");
      }

      let pathParams = {
        'asset': asset
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/users/me/assets/{asset}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the icosaApiUsersGetMeAsset operation.
     * @callback module:api/UsersApi~icosaApiUsersGetMeAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Me Asset
     * @param {String} asset 
     * @param {module:api/UsersApi~icosaApiUsersGetMeAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetSchema}
     */
    icosaApiUsersGetMeAsset(asset, callback) {
      let postBody = null;
      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling icosaApiUsersGetMeAsset");
      }

      let pathParams = {
        'asset': asset
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetSchema;
      return this.apiClient.callApi(
        '/v1/users/me/assets/{asset}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the icosaApiUsersGetMeAssets operation.
     * @callback module:api/UsersApi~icosaApiUsersGetMeAssetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAssetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Me Assets
     * @param {Object} opts Optional parameters
     * @param {module:model/Category} [category] 
     * @param {Boolean} [curated = false)] 
     * @param {Array.<module:model/FormatFilter>} [format] Filter by format
     * @param {String} [keywords] 
     * @param {String} [name] 
     * @param {String} [description] 
     * @param {Array.<String>} [tag] 
     * @param {module:model/Order} [orderBy] 
     * @param {module:model/Complexity} [maxComplexity] 
     * @param {Number} [triangleCountMin] 
     * @param {Number} [triangleCountMax] 
     * @param {String} [zipArchiveUrl] 
     * @param {String} [visibility] 
     * @param {String} [pageToken] 
     * @param {String} [pageSize] 
     * @param {module:api/UsersApi~icosaApiUsersGetMeAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAssetSchema}
     */
    icosaApiUsersGetMeAssets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'curated': opts['curated'],
        'format': this.apiClient.buildCollectionParam(opts['format'], 'multi'),
        'keywords': opts['keywords'],
        'name': opts['name'],
        'description': opts['description'],
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'orderBy': opts['orderBy'],
        'maxComplexity': opts['maxComplexity'],
        'triangleCountMin': opts['triangleCountMin'],
        'triangleCountMax': opts['triangleCountMax'],
        'zipArchiveUrl': opts['zipArchiveUrl'],
        'visibility': opts['visibility'],
        'pageToken': opts['pageToken'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedAssetSchema;
      return this.apiClient.callApi(
        '/v1/users/me/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the icosaApiUsersGetMeLikedassets operation.
     * @callback module:api/UsersApi~icosaApiUsersGetMeLikedassetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAssetSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Me Likedassets
     * @param {Object} opts Optional parameters
     * @param {module:model/Category} [category] 
     * @param {Boolean} [curated = false)] 
     * @param {Array.<module:model/FormatFilter>} [format] Filter by format
     * @param {String} [keywords] 
     * @param {String} [name] 
     * @param {String} [description] 
     * @param {Array.<String>} [tag] 
     * @param {module:model/Order} [orderBy] 
     * @param {module:model/Complexity} [maxComplexity] 
     * @param {Number} [triangleCountMin] 
     * @param {Number} [triangleCountMax] 
     * @param {String} [zipArchiveUrl] 
     * @param {String} [authorName] 
     * @param {module:model/LicenseFilter} [license] 
     * @param {String} [pageToken] 
     * @param {String} [pageSize] 
     * @param {module:api/UsersApi~icosaApiUsersGetMeLikedassetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAssetSchema}
     */
    icosaApiUsersGetMeLikedassets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'curated': opts['curated'],
        'format': this.apiClient.buildCollectionParam(opts['format'], 'multi'),
        'keywords': opts['keywords'],
        'name': opts['name'],
        'description': opts['description'],
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'orderBy': opts['orderBy'],
        'maxComplexity': opts['maxComplexity'],
        'triangleCountMin': opts['triangleCountMin'],
        'triangleCountMax': opts['triangleCountMax'],
        'zipArchiveUrl': opts['zipArchiveUrl'],
        'authorName': opts['authorName'],
        'license': opts['license'],
        'pageToken': opts['pageToken'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedAssetSchema;
      return this.apiClient.callApi(
        '/v1/users/me/likedassets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the icosaApiUsersGetUsersMe operation.
     * @callback module:api/UsersApi~icosaApiUsersGetUsersMeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullUserSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Users Me
     * @param {module:api/UsersApi~icosaApiUsersGetUsersMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullUserSchema}
     */
    icosaApiUsersGetUsersMe(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FullUserSchema;
      return this.apiClient.callApi(
        '/v1/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the icosaApiUsersUpdateUser operation.
     * @callback module:api/UsersApi~icosaApiUsersUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullUserSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * @param {module:model/PatchUserSchema} patchUserSchema 
     * @param {module:api/UsersApi~icosaApiUsersUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullUserSchema}
     */
    icosaApiUsersUpdateUser(patchUserSchema, callback) {
      let postBody = patchUserSchema;
      // verify the required parameter 'patchUserSchema' is set
      if (patchUserSchema === undefined || patchUserSchema === null) {
        throw new Error("Missing the required parameter 'patchUserSchema' when calling icosaApiUsersUpdateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWTAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FullUserSchema;
      return this.apiClient.callApi(
        '/v1/users/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
