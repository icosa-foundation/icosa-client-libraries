extends Resource
class_name FullUserSchema

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# FullUserSchema Model


# Required: True
# isArray: false
@export var id: int:
	set(value):
		__id__was__set = true
		id = value
var __id__was__set := false

# Required: True
# isArray: false
@export var username: String:
	set(value):
		__username__was__set = true
		username = value
var __username__was__set := false

# Required: True
# isArray: false
@export var email: String:
	set(value):
		__email__was__set = true
		email = value
var __email__was__set := false

# Required: False
# isArray: false
@export var displayName: String:
	set(value):
		__displayName__was__set = true
		displayName = value
var __displayName__was__set := false

# Required: False
# isArray: false
@export var description: String:
	set(value):
		__description__was__set = true
		description = value
var __description__was__set := false

# Required: True
# isArray: false
@export var url: String:
	set(value):
		__url__was__set = true
		url = value
var __url__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__id__was__set:
		bzz_missing_properties.append("id")
	if not self.__username__was__set:
		bzz_missing_properties.append("username")
	if not self.__email__was__set:
		bzz_missing_properties.append("email")
	if not self.__url__was__set:
		bzz_missing_properties.append("url")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__id__was__set:
		bzz_dictionary["id"] = self.id
	if self.__username__was__set:
		bzz_dictionary["username"] = self.username
	if self.__email__was__set:
		bzz_dictionary["email"] = self.email
	if self.__displayName__was__set:
		bzz_dictionary["displayName"] = self.displayName
	if self.__description__was__set:
		bzz_dictionary["description"] = self.description
	if self.__url__was__set:
		bzz_dictionary["url"] = self.url
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("id"):
		me.id = from_dict["id"]
	if from_dict.has("username"):
		me.username = from_dict["username"]
	if from_dict.has("email"):
		me.email = from_dict["email"]
	if from_dict.has("displayName"):
		me.displayName = from_dict["displayName"]
	if from_dict.has("description"):
		me.description = from_dict["description"]
	if from_dict.has("url"):
		me.url = from_dict["url"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

