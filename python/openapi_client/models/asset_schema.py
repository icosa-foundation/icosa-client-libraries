# coding: utf-8

"""
    NinjaAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.asset_format import AssetFormat
from openapi_client.models.thumbnail import Thumbnail
from typing import Optional, Set
from typing_extensions import Self

class AssetSchema(BaseModel):
    """
    AssetSchema
    """ # noqa: E501
    author_id: Optional[StrictStr] = Field(default=None, alias="authorId")
    author_name: StrictStr = Field(alias="authorName")
    name: StrictStr
    description: Optional[StrictStr]
    create_time: datetime = Field(alias="createTime")
    update_time: Optional[datetime] = Field(alias="updateTime")
    url: Optional[StrictStr]
    asset_id: StrictStr = Field(alias="assetId")
    formats: List[AssetFormat]
    display_name: Optional[StrictStr] = Field(alias="displayName")
    visibility: StrictStr
    tags: Optional[List[StrictStr]] = None
    is_curated: Optional[StrictBool] = Field(default=None, alias="isCurated")
    thumbnail: Optional[Thumbnail]
    triangle_count: StrictInt = Field(alias="triangleCount")
    presentation_params: Optional[Dict[str, Any]] = Field(default=None, alias="presentationParams")
    license: StrictStr
    license_version: Optional[StrictStr] = Field(alias="licenseVersion")
    __properties: ClassVar[List[str]] = ["authorId", "authorName", "name", "description", "createTime", "updateTime", "url", "assetId", "formats", "displayName", "visibility", "tags", "isCurated", "thumbnail", "triangleCount", "presentationParams", "license", "licenseVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in formats (list)
        _items = []
        if self.formats:
            for _item_formats in self.formats:
                if _item_formats:
                    _items.append(_item_formats.to_dict())
            _dict['formats'] = _items
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if update_time (nullable) is None
        # and model_fields_set contains the field
        if self.update_time is None and "update_time" in self.model_fields_set:
            _dict['updateTime'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if is_curated (nullable) is None
        # and model_fields_set contains the field
        if self.is_curated is None and "is_curated" in self.model_fields_set:
            _dict['isCurated'] = None

        # set to None if thumbnail (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail is None and "thumbnail" in self.model_fields_set:
            _dict['thumbnail'] = None

        # set to None if presentation_params (nullable) is None
        # and model_fields_set contains the field
        if self.presentation_params is None and "presentation_params" in self.model_fields_set:
            _dict['presentationParams'] = None

        # set to None if license_version (nullable) is None
        # and model_fields_set contains the field
        if self.license_version is None and "license_version" in self.model_fields_set:
            _dict['licenseVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorId": obj.get("authorId"),
            "authorName": obj.get("authorName"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "createTime": obj.get("createTime"),
            "updateTime": obj.get("updateTime"),
            "url": obj.get("url"),
            "assetId": obj.get("assetId"),
            "formats": [AssetFormat.from_dict(_item) for _item in obj["formats"]] if obj.get("formats") is not None else None,
            "displayName": obj.get("displayName"),
            "visibility": obj.get("visibility"),
            "tags": obj.get("tags"),
            "isCurated": obj.get("isCurated"),
            "thumbnail": Thumbnail.from_dict(obj["thumbnail"]) if obj.get("thumbnail") is not None else None,
            "triangleCount": obj.get("triangleCount"),
            "presentationParams": obj.get("presentationParams"),
            "license": obj.get("license"),
            "licenseVersion": obj.get("licenseVersion")
        })
        return _obj


