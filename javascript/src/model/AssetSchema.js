/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetFormat from './AssetFormat';
import Thumbnail from './Thumbnail';

/**
 * The AssetSchema model module.
 * @module model/AssetSchema
 * @version 1.0.0
 */
class AssetSchema {
    /**
     * Constructs a new <code>AssetSchema</code>.
     * @alias module:model/AssetSchema
     * @param authorName {String} 
     * @param name {String} 
     * @param description {String} 
     * @param createTime {Date} 
     * @param updateTime {Date} 
     * @param url {String} 
     * @param assetId {String} 
     * @param formats {Array.<module:model/AssetFormat>} 
     * @param displayName {String} 
     * @param visibility {String} 
     * @param thumbnail {module:model/Thumbnail} 
     * @param triangleCount {Number} 
     * @param license {String} 
     * @param licenseVersion {String} 
     */
    constructor(authorName, name, description, createTime, updateTime, url, assetId, formats, displayName, visibility, thumbnail, triangleCount, license, licenseVersion) { 
        
        AssetSchema.initialize(this, authorName, name, description, createTime, updateTime, url, assetId, formats, displayName, visibility, thumbnail, triangleCount, license, licenseVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorName, name, description, createTime, updateTime, url, assetId, formats, displayName, visibility, thumbnail, triangleCount, license, licenseVersion) { 
        obj['authorName'] = authorName;
        obj['name'] = name;
        obj['description'] = description;
        obj['createTime'] = createTime;
        obj['updateTime'] = updateTime;
        obj['url'] = url;
        obj['assetId'] = assetId;
        obj['formats'] = formats;
        obj['displayName'] = displayName;
        obj['visibility'] = visibility;
        obj['thumbnail'] = thumbnail;
        obj['triangleCount'] = triangleCount;
        obj['license'] = license;
        obj['licenseVersion'] = licenseVersion;
    }

    /**
     * Constructs a <code>AssetSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetSchema} obj Optional instance to populate.
     * @return {module:model/AssetSchema} The populated <code>AssetSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetSchema();

            if (data.hasOwnProperty('authorId')) {
                obj['authorId'] = ApiClient.convertToType(data['authorId'], 'String');
            }
            if (data.hasOwnProperty('authorName')) {
                obj['authorName'] = ApiClient.convertToType(data['authorName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], [AssetFormat]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('isCurated')) {
                obj['isCurated'] = ApiClient.convertToType(data['isCurated'], 'Boolean');
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = Thumbnail.constructFromObject(data['thumbnail']);
            }
            if (data.hasOwnProperty('triangleCount')) {
                obj['triangleCount'] = ApiClient.convertToType(data['triangleCount'], 'Number');
            }
            if (data.hasOwnProperty('presentationParams')) {
                obj['presentationParams'] = ApiClient.convertToType(data['presentationParams'], Object);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('licenseVersion')) {
                obj['licenseVersion'] = ApiClient.convertToType(data['licenseVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorId'] && !(typeof data['authorId'] === 'string' || data['authorId'] instanceof String)) {
            throw new Error("Expected the field `authorId` to be a primitive type in the JSON string but got " + data['authorId']);
        }
        // ensure the json data is a string
        if (data['authorName'] && !(typeof data['authorName'] === 'string' || data['authorName'] instanceof String)) {
            throw new Error("Expected the field `authorName` to be a primitive type in the JSON string but got " + data['authorName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        if (data['formats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formats'])) {
                throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
            }
            // validate the optional field `formats` (array)
            for (const item of data['formats']) {
                AssetFormat.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          Thumbnail.validateJSON(data['thumbnail']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['licenseVersion'] && !(typeof data['licenseVersion'] === 'string' || data['licenseVersion'] instanceof String)) {
            throw new Error("Expected the field `licenseVersion` to be a primitive type in the JSON string but got " + data['licenseVersion']);
        }

        return true;
    }


}

AssetSchema.RequiredProperties = ["authorName", "name", "description", "createTime", "updateTime", "url", "assetId", "formats", "displayName", "visibility", "thumbnail", "triangleCount", "license", "licenseVersion"];

/**
 * @member {String} authorId
 */
AssetSchema.prototype['authorId'] = undefined;

/**
 * @member {String} authorName
 */
AssetSchema.prototype['authorName'] = undefined;

/**
 * @member {String} name
 */
AssetSchema.prototype['name'] = undefined;

/**
 * @member {String} description
 */
AssetSchema.prototype['description'] = undefined;

/**
 * @member {Date} createTime
 */
AssetSchema.prototype['createTime'] = undefined;

/**
 * @member {Date} updateTime
 */
AssetSchema.prototype['updateTime'] = undefined;

/**
 * @member {String} url
 */
AssetSchema.prototype['url'] = undefined;

/**
 * @member {String} assetId
 */
AssetSchema.prototype['assetId'] = undefined;

/**
 * @member {Array.<module:model/AssetFormat>} formats
 */
AssetSchema.prototype['formats'] = undefined;

/**
 * @member {String} displayName
 */
AssetSchema.prototype['displayName'] = undefined;

/**
 * @member {String} visibility
 */
AssetSchema.prototype['visibility'] = undefined;

/**
 * @member {Array.<String>} tags
 */
AssetSchema.prototype['tags'] = undefined;

/**
 * @member {Boolean} isCurated
 */
AssetSchema.prototype['isCurated'] = undefined;

/**
 * @member {module:model/Thumbnail} thumbnail
 */
AssetSchema.prototype['thumbnail'] = undefined;

/**
 * @member {Number} triangleCount
 */
AssetSchema.prototype['triangleCount'] = undefined;

/**
 * @member {Object} presentationParams
 */
AssetSchema.prototype['presentationParams'] = undefined;

/**
 * @member {String} license
 */
AssetSchema.prototype['license'] = undefined;

/**
 * @member {String} licenseVersion
 */
AssetSchema.prototype['licenseVersion'] = undefined;






export default AssetSchema;

