/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FormatFilter {
    #[serde(rename = "TILT")]
    Tilt,
    #[serde(rename = "BLOCKS")]
    Blocks,
    #[serde(rename = "GLTF")]
    Gltf,
    #[serde(rename = "GLTF1")]
    Gltf1,
    #[serde(rename = "GLTF2")]
    Gltf22,
    #[serde(rename = "OBJ")]
    Obj,
    #[serde(rename = "FBX")]
    Fbx,
    #[serde(rename = "-TILT")]
    Tilt2,
    #[serde(rename = "-BLOCKS")]
    Blocks2,
    #[serde(rename = "-GLTF")]
    Gltf2,
    #[serde(rename = "-GLTF1")]
    Gltf12,
    #[serde(rename = "-GLTF2")]
    Gltf22,
    #[serde(rename = "-OBJ")]
    Obj2,
    #[serde(rename = "-FBX")]
    Fbx2,

}

impl std::fmt::Display for FormatFilter {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Tilt => write!(f, "TILT"),
            Self::Blocks => write!(f, "BLOCKS"),
            Self::Gltf => write!(f, "GLTF"),
            Self::Gltf1 => write!(f, "GLTF1"),
            Self::Gltf22 => write!(f, "GLTF2"),
            Self::Obj => write!(f, "OBJ"),
            Self::Fbx => write!(f, "FBX"),
            Self::Tilt2 => write!(f, "-TILT"),
            Self::Blocks2 => write!(f, "-BLOCKS"),
            Self::Gltf2 => write!(f, "-GLTF"),
            Self::Gltf12 => write!(f, "-GLTF1"),
            Self::Gltf22 => write!(f, "-GLTF2"),
            Self::Obj2 => write!(f, "-OBJ"),
            Self::Fbx2 => write!(f, "-FBX"),
        }
    }
}

impl Default for FormatFilter {
    fn default() -> FormatFilter {
        Self::Tilt
    }
}

