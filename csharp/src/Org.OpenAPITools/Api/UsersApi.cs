/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        int IcosaApiUsersDeleteAsset(string asset, int operationIndex = 0);

        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> IcosaApiUsersDeleteAssetWithHttpInfo(string asset, int operationIndex = 0);
        /// <summary>
        /// Get Me Asset
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetSchema</returns>
        AssetSchema IcosaApiUsersGetMeAsset(string asset, int operationIndex = 0);

        /// <summary>
        /// Get Me Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetSchema</returns>
        ApiResponse<AssetSchema> IcosaApiUsersGetMeAssetWithHttpInfo(string asset, int operationIndex = 0);
        /// <summary>
        /// Get Me Assets
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedAssetSchema</returns>
        PagedAssetSchema IcosaApiUsersGetMeAssets(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Me Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedAssetSchema</returns>
        ApiResponse<PagedAssetSchema> IcosaApiUsersGetMeAssetsWithHttpInfo(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Me Likedassets
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedAssetSchema</returns>
        PagedAssetSchema IcosaApiUsersGetMeLikedassets(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Me Likedassets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedAssetSchema</returns>
        ApiResponse<PagedAssetSchema> IcosaApiUsersGetMeLikedassetsWithHttpInfo(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get Users Me
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FullUserSchema</returns>
        FullUserSchema IcosaApiUsersGetUsersMe(int operationIndex = 0);

        /// <summary>
        /// Get Users Me
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FullUserSchema</returns>
        ApiResponse<FullUserSchema> IcosaApiUsersGetUsersMeWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update User
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FullUserSchema</returns>
        FullUserSchema IcosaApiUsersUpdateUser(PatchUserSchema patchUserSchema, int operationIndex = 0);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FullUserSchema</returns>
        ApiResponse<FullUserSchema> IcosaApiUsersUpdateUserWithHttpInfo(PatchUserSchema patchUserSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> IcosaApiUsersDeleteAssetAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> IcosaApiUsersDeleteAssetWithHttpInfoAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Me Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchema</returns>
        System.Threading.Tasks.Task<AssetSchema> IcosaApiUsersGetMeAssetAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Me Asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetSchema>> IcosaApiUsersGetMeAssetWithHttpInfoAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Me Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedAssetSchema</returns>
        System.Threading.Tasks.Task<PagedAssetSchema> IcosaApiUsersGetMeAssetsAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Me Assets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedAssetSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedAssetSchema>> IcosaApiUsersGetMeAssetsWithHttpInfoAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Me Likedassets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedAssetSchema</returns>
        System.Threading.Tasks.Task<PagedAssetSchema> IcosaApiUsersGetMeLikedassetsAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Me Likedassets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedAssetSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedAssetSchema>> IcosaApiUsersGetMeLikedassetsWithHttpInfoAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Users Me
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullUserSchema</returns>
        System.Threading.Tasks.Task<FullUserSchema> IcosaApiUsersGetUsersMeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Users Me
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullUserSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullUserSchema>> IcosaApiUsersGetUsersMeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullUserSchema</returns>
        System.Threading.Tasks.Task<FullUserSchema> IcosaApiUsersUpdateUserAsync(PatchUserSchema patchUserSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullUserSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<FullUserSchema>> IcosaApiUsersUpdateUserWithHttpInfoAsync(PatchUserSchema patchUserSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        public int IcosaApiUsersDeleteAsset(string asset, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<int> localVarResponse = IcosaApiUsersDeleteAssetWithHttpInfo(asset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        public Org.OpenAPITools.Client.ApiResponse<int> IcosaApiUsersDeleteAssetWithHttpInfo(string asset, int operationIndex = 0)
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling UsersApi->IcosaApiUsersDeleteAsset");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersDeleteAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<int>("/v1/users/me/assets/{asset}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersDeleteAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> IcosaApiUsersDeleteAssetAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<int> localVarResponse = await IcosaApiUsersDeleteAssetWithHttpInfoAsync(asset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<int>> IcosaApiUsersDeleteAssetWithHttpInfoAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling UsersApi->IcosaApiUsersDeleteAsset");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersDeleteAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<int>("/v1/users/me/assets/{asset}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersDeleteAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Me Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetSchema</returns>
        public AssetSchema IcosaApiUsersGetMeAsset(string asset, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetSchema> localVarResponse = IcosaApiUsersGetMeAssetWithHttpInfo(asset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Me Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetSchema> IcosaApiUsersGetMeAssetWithHttpInfo(string asset, int operationIndex = 0)
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling UsersApi->IcosaApiUsersGetMeAsset");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetMeAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AssetSchema>("/v1/users/me/assets/{asset}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetMeAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Me Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetSchema</returns>
        public async System.Threading.Tasks.Task<AssetSchema> IcosaApiUsersGetMeAssetAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetSchema> localVarResponse = await IcosaApiUsersGetMeAssetWithHttpInfoAsync(asset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Me Asset 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asset"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetSchema>> IcosaApiUsersGetMeAssetWithHttpInfoAsync(string asset, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'asset' is set
            if (asset == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'asset' when calling UsersApi->IcosaApiUsersGetMeAsset");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("asset", Org.OpenAPITools.Client.ClientUtils.ParameterToString(asset)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetMeAsset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssetSchema>("/v1/users/me/assets/{asset}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetMeAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Me Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedAssetSchema</returns>
        public PagedAssetSchema IcosaApiUsersGetMeAssets(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema> localVarResponse = IcosaApiUsersGetMeAssetsWithHttpInfo(category, curated, format, keywords, name, description, tag, orderBy, maxComplexity, triangleCountMin, triangleCountMax, zipArchiveUrl, visibility, pageToken, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Me Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedAssetSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema> IcosaApiUsersGetMeAssetsWithHttpInfo(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (curated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "curated", curated));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "format", format));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (maxComplexity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxComplexity", maxComplexity));
            }
            if (triangleCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMin", triangleCountMin));
            }
            if (triangleCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMax", triangleCountMax));
            }
            if (zipArchiveUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zipArchiveUrl", zipArchiveUrl));
            }
            if (visibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visibility", visibility));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetMeAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PagedAssetSchema>("/v1/users/me/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetMeAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Me Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedAssetSchema</returns>
        public async System.Threading.Tasks.Task<PagedAssetSchema> IcosaApiUsersGetMeAssetsAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema> localVarResponse = await IcosaApiUsersGetMeAssetsWithHttpInfoAsync(category, curated, format, keywords, name, description, tag, orderBy, maxComplexity, triangleCountMin, triangleCountMax, zipArchiveUrl, visibility, pageToken, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Me Assets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="visibility"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedAssetSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema>> IcosaApiUsersGetMeAssetsWithHttpInfoAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? visibility = default(string?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (curated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "curated", curated));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "format", format));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (maxComplexity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxComplexity", maxComplexity));
            }
            if (triangleCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMin", triangleCountMin));
            }
            if (triangleCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMax", triangleCountMax));
            }
            if (zipArchiveUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zipArchiveUrl", zipArchiveUrl));
            }
            if (visibility != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "visibility", visibility));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetMeAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagedAssetSchema>("/v1/users/me/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetMeAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Me Likedassets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedAssetSchema</returns>
        public PagedAssetSchema IcosaApiUsersGetMeLikedassets(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema> localVarResponse = IcosaApiUsersGetMeLikedassetsWithHttpInfo(category, curated, format, keywords, name, description, tag, orderBy, maxComplexity, triangleCountMin, triangleCountMax, zipArchiveUrl, authorName, license, pageToken, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Me Likedassets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedAssetSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema> IcosaApiUsersGetMeLikedassetsWithHttpInfo(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (curated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "curated", curated));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "format", format));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (maxComplexity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxComplexity", maxComplexity));
            }
            if (triangleCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMin", triangleCountMin));
            }
            if (triangleCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMax", triangleCountMax));
            }
            if (zipArchiveUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zipArchiveUrl", zipArchiveUrl));
            }
            if (authorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "authorName", authorName));
            }
            if (license != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "license", license));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetMeLikedassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PagedAssetSchema>("/v1/users/me/likedassets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetMeLikedassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Me Likedassets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedAssetSchema</returns>
        public async System.Threading.Tasks.Task<PagedAssetSchema> IcosaApiUsersGetMeLikedassetsAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema> localVarResponse = await IcosaApiUsersGetMeLikedassetsWithHttpInfoAsync(category, curated, format, keywords, name, description, tag, orderBy, maxComplexity, triangleCountMin, triangleCountMax, zipArchiveUrl, authorName, license, pageToken, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Me Likedassets 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category"> (optional)</param>
        /// <param name="curated"> (optional, default to false)</param>
        /// <param name="format">Filter by format (optional)</param>
        /// <param name="keywords"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="tag"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="maxComplexity"> (optional)</param>
        /// <param name="triangleCountMin"> (optional)</param>
        /// <param name="triangleCountMax"> (optional)</param>
        /// <param name="zipArchiveUrl"> (optional)</param>
        /// <param name="authorName"> (optional)</param>
        /// <param name="license"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedAssetSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PagedAssetSchema>> IcosaApiUsersGetMeLikedassetsWithHttpInfoAsync(Category? category = default(Category?), bool? curated = default(bool?), List<FormatFilter>? format = default(List<FormatFilter>?), string? keywords = default(string?), string? name = default(string?), string? description = default(string?), List<string>? tag = default(List<string>?), Order? orderBy = default(Order?), Complexity? maxComplexity = default(Complexity?), int? triangleCountMin = default(int?), int? triangleCountMax = default(int?), string? zipArchiveUrl = default(string?), string? authorName = default(string?), LicenseFilter? license = default(LicenseFilter?), string? pageToken = default(string?), string? pageSize = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (curated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "curated", curated));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "format", format));
            }
            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (description != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "description", description));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tag", tag));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (maxComplexity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "maxComplexity", maxComplexity));
            }
            if (triangleCountMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMin", triangleCountMin));
            }
            if (triangleCountMax != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "triangleCountMax", triangleCountMax));
            }
            if (zipArchiveUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "zipArchiveUrl", zipArchiveUrl));
            }
            if (authorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "authorName", authorName));
            }
            if (license != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "license", license));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetMeLikedassets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagedAssetSchema>("/v1/users/me/likedassets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetMeLikedassets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Users Me 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FullUserSchema</returns>
        public FullUserSchema IcosaApiUsersGetUsersMe(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FullUserSchema> localVarResponse = IcosaApiUsersGetUsersMeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Users Me 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FullUserSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<FullUserSchema> IcosaApiUsersGetUsersMeWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetUsersMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FullUserSchema>("/v1/users/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetUsersMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Users Me 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullUserSchema</returns>
        public async System.Threading.Tasks.Task<FullUserSchema> IcosaApiUsersGetUsersMeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FullUserSchema> localVarResponse = await IcosaApiUsersGetUsersMeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Users Me 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullUserSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FullUserSchema>> IcosaApiUsersGetUsersMeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersGetUsersMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FullUserSchema>("/v1/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersGetUsersMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FullUserSchema</returns>
        public FullUserSchema IcosaApiUsersUpdateUser(PatchUserSchema patchUserSchema, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FullUserSchema> localVarResponse = IcosaApiUsersUpdateUserWithHttpInfo(patchUserSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FullUserSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<FullUserSchema> IcosaApiUsersUpdateUserWithHttpInfo(PatchUserSchema patchUserSchema, int operationIndex = 0)
        {
            // verify the required parameter 'patchUserSchema' is set
            if (patchUserSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'patchUserSchema' when calling UsersApi->IcosaApiUsersUpdateUser");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = patchUserSchema;

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersUpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<FullUserSchema>("/v1/users/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersUpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FullUserSchema</returns>
        public async System.Threading.Tasks.Task<FullUserSchema> IcosaApiUsersUpdateUserAsync(PatchUserSchema patchUserSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FullUserSchema> localVarResponse = await IcosaApiUsersUpdateUserWithHttpInfoAsync(patchUserSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserSchema"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FullUserSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FullUserSchema>> IcosaApiUsersUpdateUserWithHttpInfoAsync(PatchUserSchema patchUserSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'patchUserSchema' is set
            if (patchUserSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'patchUserSchema' when calling UsersApi->IcosaApiUsersUpdateUser");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = patchUserSchema;

            localVarRequestOptions.Operation = "UsersApi.IcosaApiUsersUpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWTAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<FullUserSchema>("/v1/users/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IcosaApiUsersUpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
