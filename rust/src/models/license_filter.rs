/*
 * NinjaAPI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LicenseFilter {
    #[serde(rename = "REMIXABLE")]
    Remixable,
    #[serde(rename = "ALL_CC")]
    AllCc,
    #[serde(rename = "CREATIVE_COMMONS_BY_3_0")]
    CreativeCommonsBy30,
    #[serde(rename = "CREATIVE_COMMONS_BY_ND_3_0")]
    CreativeCommonsByNd30,
    #[serde(rename = "CREATIVE_COMMONS_BY_4_0")]
    CreativeCommonsBy40,
    #[serde(rename = "CREATIVE_COMMONS_BY_ND_4_0")]
    CreativeCommonsByNd40,
    #[serde(rename = "CREATIVE_COMMONS_BY")]
    CreativeCommonsBy,
    #[serde(rename = "CREATIVE_COMMONS_BY_ND")]
    CreativeCommonsByNd,
    #[serde(rename = "CREATIVE_COMMONS_0")]
    CreativeCommons0,

}

impl std::fmt::Display for LicenseFilter {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Remixable => write!(f, "REMIXABLE"),
            Self::AllCc => write!(f, "ALL_CC"),
            Self::CreativeCommonsBy30 => write!(f, "CREATIVE_COMMONS_BY_3_0"),
            Self::CreativeCommonsByNd30 => write!(f, "CREATIVE_COMMONS_BY_ND_3_0"),
            Self::CreativeCommonsBy40 => write!(f, "CREATIVE_COMMONS_BY_4_0"),
            Self::CreativeCommonsByNd40 => write!(f, "CREATIVE_COMMONS_BY_ND_4_0"),
            Self::CreativeCommonsBy => write!(f, "CREATIVE_COMMONS_BY"),
            Self::CreativeCommonsByNd => write!(f, "CREATIVE_COMMONS_BY_ND"),
            Self::CreativeCommons0 => write!(f, "CREATIVE_COMMONS_0"),
        }
    }
}

impl Default for LicenseFilter {
    fn default() -> LicenseFilter {
        Self::Remixable
    }
}

